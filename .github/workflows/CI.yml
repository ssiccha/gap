name: CI

# Trigger the workflow on push or pull request
on:
  - push
  - pull_request

env:
  CFLAGS: "--coverage -O2 -g"
  CXXFLAGS: "--coverage -O2 -g"
  LDFLAGS: "--coverage"
  # default config flags: enable debug asserts
  CONFIGFLAGS: "--enable-debug"
  COVERALLS_PARALLEL: true

jobs:
  test-unix:
    name: ${{ matrix.test-suites }} - ${{ matrix.extra }} - ${{ matrix.os }}
    # Don't run this twice on PRs for branches pushed to the same repository
    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # base test: fast first test
        os: [ubuntu-18.04]
        test-suites: ["testinstall"]

        # add a few extra tests
        include:
          - os: ubuntu-18.04
            test-suites: "docomp teststandard"

          - os: ubuntu-18.04
            test-suites: "docomp teststandard"
            extra: "ABI=32 CONFIGFLAGS=\"\""

          # FIXME: we used to run `teststandard` for HPC-GAP under Travis CI,
          # but somehow when running on GitHub Actions, it takes almost 4
          # hours (!) to complete instead of 25 minutes. So for now we just
          # run testinstall.
          - os: ubuntu-18.04
            test-suites: "docomp testinstall"
            extra: "HPCGAP=yes ABI=64"

          # compile packages and run GAP tests
          # don't use --enable-debug to prevent the tests from taking too long

    env:
      TEST_SUITES: ${{ matrix.test-suites }}

    steps:
      - uses: actions/checkout@v2

      - name: "Set up Python 3.7"
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: "Install dependencies"
        run: |
               ${{ matrix.extra }}
               if [ "$RUNNER_OS" == "Linux" ]; then
                   packages=(${{ matrix.packages }})
                   if [[ $TEST_SUITES == *testbuildsys* ]] ; then
                       sudo apt-get remove libgmp-dev libreadline-dev zlib1g-dev
                   else
                       packages+=(libgmp-dev libreadline-dev zlib1g-dev)
                   fi
                   if [[ $ABI == 32 ]] ; then
                       sudo dpkg --add-architecture i386
                       for i in "${!packages[@]}"; do
                           packages[$i]="${packages[$i]}:i386"
                       done
                       packages+=(gcc-multilib g++-multilib)
                   fi
                   sudo apt-get update
                   sudo apt-get install "${packages[@]}"
               elif [ "$RUNNER_OS" == "macOS" ]; then
                   brew install gmp zlib
               else
                   echo "$RUNNER_OS not supported"
                   exit 1
               fi
               python -m pip install gcovr

      - name: "Compile GAP and download packages"
        run: ${{ matrix.extra }} bash dev/ci-prepare.sh

      # TODO: fix coveralls integration
      #- name: Coveralls Parallel
      #  uses: coverallsapp/github-action@master
      #  with:
      #    github-token: ${{ secrets.github_token }}
      #    flag-name: run-${{ matrix.test_number }}
      #    parallel: true

#  finish:
#    needs: test-unix
#    runs-on: ubuntu-18.04
#    steps:
#      - name: Coveralls Finished
#        uses: coverallsapp/github-action@master
#        with:
#          github-token: ${{ secrets.github_token }}
#          parallel-finished: true

  # Based on https://github.com/mit-plv/fiat-crypto/blob/master/.github/workflows/coq-windows.yml
  test-cygwin:
    name: cygwin64 - testinstall
    # Don't run this twice on PRs for branches pushed to the same repository
    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}
    runs-on: windows-latest

    env:
      TEST_SUITES: testinstall

    steps:
      # This sets git to use UNIX line endings. While GAP should allow Windows
      # line endings in GAP files, we currently can't build GAP if the whole
      # source has Windows line endings
      - name: "Set git to use UNIX-style line endings"
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - uses: actions/checkout@v2

      - uses: gap-actions/setup-cygwin-for-gap@v1

      # CHERE_INVOKING=1 lets us start a 'login shell' (to set paths) without changing directory
      - name: "Compile GAP and download packages"
        shell: cmd
        run: |
          @ECHO ON
          SET CHERE_INVOKING=1
          C:\cygwin64\bin\bash -l -c "bash dev/ci-prepare.sh"

      - name: "Run tests"
        shell: cmd
        run: |
          SET CHERE_INVOKING=1
          C:\cygwin64\bin\bash -l -c "bash dev/ci.sh"

  slack-notification-on-failure:
    name: Send slack notification on CI failure
    needs:
      - test-unix
      - test-cygwin
    if: ${{ failure() && github.event_name == 'push' }}
    # Don't run this twice on PRs for branches pushed to the same repository
    #if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}
    runs-on: ubuntu-latest

    steps:
      - name: "Send slack notification on CI failure"
        uses: act10ns/slack@e4e71685b9b239384b0f676a63c32367f59c2522
        with:
          status: Failure
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
